Video title/topic (if you have it)
Key concepts you learned
Code examples or snippets you tried
Important notes or things to remember
Any questions or confusions you had

# Topic-01: Global Object and Module System
# Key concepts:
    -> if we log window like
        console.log(window);
        output: window is not defined. So window in unavailable in NodeJS.
    -> we can use setTimeouT() function in NodeJS.
    -> In NodeJS there is an object named global. which is equivlent to window in JS.
    -> if we console.log(global)
        output: Object [global] {
            global: [Circular *1],
            clearImmediate: [Function: clearImmediate],
            setImmediate: [Function: setImmediate] {
                [Symbol(nodejs.util.promisify.custom)]: [Getter]
            },
            clearInterval: [Function: clearInterval],
            clearTimeout: [Function: clearTimeout],
            setInterval: [Function: setInterval],
            setTimeout: [Function: setTimeout] {
                [Symbol(nodejs.util.promisify.custom)]: [Getter]
            },
            queueMicrotask: [Function: queueMicrotask],
            structuredClone: [Function: structuredClone],
            atob: [Function: atob],
            btoa: [Function: btoa],
            performance: [Getter/Setter],
            fetch: [Function: fetch],
            navigator: [Getter],
            crypto: [Getter]
            }
    -> setTimeouT is inside the global that's why it is accessible.
    -> in js if we declare a variable suppose var a = 5; then console.log(window.a) gives a value. but in nodejs console.log(global.a) in undefined.
    -> console.log(__dirname); outputs the directory name/location. (/home/armaan/projects/NodeJS); This doesn't included in the global.
    -> console.log(__filename); outputs the file name/location. (/home/armaan/projects/NodeJS/index.js); This doesn't included in the global.
    -> if we console.log(module) 
    output: {
            id: '.',
            path: '/home/armaan/projects/NodeJS',
            exports: {},
            filename: '/home/armaan/projects/NodeJS/people.js',
            loaded: false,
            children: [],
            paths: [
                '/home/armaan/projects/NodeJS/node_modules',
                '/home/armaan/projects/node_modules',
                '/home/armaan/node_modules',
                '/home/node_modules',
                '/node_modules'
            ],
            [Symbol(kIsMainSymbol)]: true,
            [Symbol(kIsCachedByESMLoader)]: false,
            [Symbol(kURL)]: undefined,
            [Symbol(kFormat)]: undefined,
            [Symbol(kIsExecuting)]: true
            }
    # module: from where module comes?
        -> IIFE method: whatever code i write, it wrapped by a function called IIFE and lastly return that function. its called module wrapper function. that function parameters are exports, require, module, __filename, __dirname.
        

# Topic-02: Core modules and server
# Key concepts:
    1. path module: 
        code:   const path = require('path');
                const myPath = '/home/armaan/projects/NodeJS/index.js';
                -> console.log(path.basename(myPath)); output: index.js
                -> console.log(path.dirname(myPath)); output: /home/armaan/projects/NodeJS
                -> console.log(path.extname(myPath)); output: .js
                -> console.log(path.parse(myPath)); 
                    output: {
                                root: '/',
                                dir: '/home/armaan/projects/NodeJS',
                                base: 'index.js',
                                ext: '.js',
                                name: 'index'
                            }
                ->  // path.format(pathObject)
                    // path.matchesGlob(path, pattern)
                    // path.isAbsolute(path)
                    // path.join([...paths])
                    // path.normalize(path)
                    // path.parse(path)
                    // path.posix
                    // path.relative(from, to)
                    // path.resolve([...paths])
                    // path.sep
                    // path.toNamespacedPath(path)
                    // path.win32
    2. OS module:
        const os = require('os');
        console.log(os.platform());
        console.log(os.homedir());
        console.log(os.freemem());
        console.log(os.cpus());
    3. file module:
    4: events module:
        -> events-module.js
            const EventEmitter = require("events");
            const emitter = new EventEmitter();

            const startPeriod = require("./school");
            // register a listener for bellRing event
            emitter.on("bellRing", ({ period, text }) => {
            console.log(`We need to run because ${period} ${text}`);
            });
            startPeriod();
        -> school.js
            const EventEmitter = require("events");
            const emitter = new EventEmitter();

            function startPeriod() {
            console.log("Class started");
            // raise an event when bell rings
            setTimeout(() => {
                emitter.emit("bellRing", { period: "first", text: "Period ended" });
            }, 2000);
            }
            module.exports = startPeriod;
        output: only "Class started" because emitter is a new different class in individual js file.
        if we code like:
        -> events-module.js
            const EventEmitter = require("events");
            const emitter = new EventEmitter();

            const School = require("./school");
            // register a listener for bellRing event
            const school = new School();
            school.on("bellRing", ({ period, text }) => {
            console.log(`We need to run because ${period} ${text}`);
            });
            school.startPeriod();
        -> school.js
            const EventEmitter = require("events");
            class School extends EventEmitter {
            startPeriod() {
                console.log("Class started");
                // raise an event when bell rings
                setTimeout(() => {
                this.emit("bellRing", { period: "first", text: "Period ended" });
                }, 2000);
            }
            }

            module.exports = School;
            output: Class started
                    We need to run because first Period ended       
    5. HTTP module: